#set( $escapeDollar = '$' )
import { I18nService } from "@domoskanonos/frontend-basis";
import { InputfieldType } from "@domoskanonos/nidoca-core";
import {
NidocaAbstractComponentEdit
} from '@domoskanonos/nidoca-app';
import {customElement, html, property, TemplateResult} from 'lit-element';
import {${model.getModelName()}} from '../../model/${model.getModelNameLowerCase()}-model';
import {${model.getModelName()}RemoteRepository} from "../../repo/${model.getModelNameLowerCase()}-remote-repository";

@customElement('${model.getNidocaComponentEditTagName()}')
export class ${model.getModelName()}EditComponent extends NidocaAbstractComponentEdit<${model.getModelName()}> {

    getDialogDeleteTitle(): string {
        return I18nService.getUniqueInstance().getValue("${model.getI18nEditDialogDeleteTitleKey()}");
    }

    getDialogDeleteDescription(): string {
        return I18nService.getUniqueInstance().getValue("${model.getI18nEditDialogDeleteDescriptionKey()}");
    }

    async getItemById(identifier: any): Promise<${model.getModelName()}> {
        return ${model.getModelName()}RemoteRepository.getUniqueInstance().findById(identifier);
    }

    async executeSave(item: ${model.getModelName()}): Promise<${model.getModelName()}> {
        return ${model.getModelName()}RemoteRepository.getUniqueInstance().persist(item);
    }

    async executeUpdate(identifier:any, item: ${model.getModelName()}): Promise<${model.getModelName()}> {
        return ${model.getModelName()}RemoteRepository.getUniqueInstance().update(identifier, item);
    }

    async executeDelete(identifier: any): Promise<void> {
        return ${model.getModelName()}RemoteRepository.getUniqueInstance().delete(identifier);
    }

    #foreach( $property in $model.properties )
    #if(!${property.idProperty})
    @property()
    ${property.name} : ${property.typescriptType} ${property.propertyType.typescriptInitValue};
    #end
    #end

    renderFormFields(): TemplateResult {
        return html`
            #foreach( $property in $model.properties )
            #if(!${property.idProperty})
            <nidoca-inputfield
                    .value="$escapeDollar{this.${property.name}}"
                    name="${property.name}"
                    inputfieldType="${property.wcAtomicInputfieldType}"
                    label="$escapeDollar{I18nService.getUniqueInstance().getValue('${property.getI18nKey()}')}"
            ></nidoca-inputfield>
            #end
            #end
        `;
    }

    itemToProperties(${model.getModelNameLowerCase()}: ${model.getModelName()}): void {
        #foreach( $property in $model.properties )
        #if(!${property.idProperty})
        this.${property.name} = ${model.getModelNameLowerCase()}.${property.name};
        #end
        #end
    }

    getIdentifier(${model.getModelNameLowerCase()}: ${model.getModelName()}): any {
        return ${model.getModelNameLowerCase()}.${model.getIdFieldName()};
    }


}
