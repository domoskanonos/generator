#set( $escapeDollar = '$' )
import {
NidocaAbstractComponentSearchList
} from '@domoskanonos/nidoca-app';
import { PageableContainer, RouterService, I18nService } from '@domoskanonos/frontend-basis';
import { customElement, html, TemplateResult } from 'lit-element';
import {
TypographyType,
FlexJustifyContent,
FlexAlignItems,
SpacerAlignment,
SpacerSize,
FlexContainerProperties
} from '@domoskanonos/nidoca-core';
import {${model.getModelName()}RemoteRepository} from '../../repo/${model.getModelNameLowerCase()}-remote-repository';
import {${model.getModelName()}} from '../../model/${model.getModelNameLowerCase()}-model';

@customElement('${model.getNidocaComponentSearchListTagName()}')
export class ${model.getModelName()}SearchNidocaList extends NidocaAbstractComponentSearchList<${model.getModelName()}> {

    async executeSearch(search: string): Promise<${model.getModelName()}[]> {
        let pageableContainer: PageableContainer<${model.getModelName()}> = await ${model.getModelName()}RemoteRepository.getUniqueInstance().search(
            0,
            this.resultSize,
            '', ''
            #foreach( $property in $model.properties )
                #set( $isNotIdField = !${property.idProperty} )
                #set( $isString = ${property.typescriptType} == "string" )
                #if($isNotIdField && $isString)
                .concat('&${property.name}=')
                .concat(search)
                #end
            #end
        );
        return pageableContainer.content;
    }

    renderListItem(${model.getModelNameLowerCase()}: ${model.getModelName()}) : TemplateResult {
        return html`
    <nidoca-spacer
    .spacerSize="${SpacerSize.MEDIUM}"
    spacerAlignment="${SpacerAlignment.VERTICAL}"
    ></nidoca-spacer>
    <nidoca-spacer
    .spacerSize="${SpacerSize.MAX}"
    spacerAlignment="${SpacerAlignment.HORIZONTAL}"
    >
        <nidoca-flex-container
        .flexContainerProperties="${[FlexContainerProperties.CONTAINER_WIDTH_100]}"
        flexItemBasisValue="100%"
        .justifyContent="${FlexJustifyContent.FLEX_START}"
        .alignItems="${FlexAlignItems.CENTER}"
        >
            #foreach( $property in $model.properties )
            <nidoca-typography .typographyType="${TypographyType.BODY1}" text="$escapeDollar{${model.getModelNameLowerCase()}.${property.name}}"></nidoca-typography>
            #end
        </nidoca-flex-container>
    </nidoca-spacer>
    <nidoca-spacer
    .spacerSize="${SpacerSize.MEDIUM}"
    spacerAlignment="${SpacerAlignment.VERTICAL}"
    ></nidoca-spacer>
      `;
    }

    itemClicked(${model.getModelNameLowerCase()}: ${model.getModelName()}, index: number): void {
        console.debug("${model.getModelName()} list item clicked, index= {0}", index);
        RouterService.getUniqueInstance().navigate('${model.nidocaPageEditUrl}',{ 'id' : ${model.getModelNameLowerCase()}.${model.getIdFieldName()}});
    }

   renderNoRecord(): TemplateResult {
      return html`
         <nidoca-flex-container
            .flexContainerProperties="${[FlexContainerProperties.CONTAINER_WIDTH_100]}"
            flexItemBasisValue="auto"
            .flexJustifyContent="${FlexJustifyContent.SPACE_AROUND}"
            .alignItems="${FlexAlignItems.CENTER}"
         >
            <nidoca-spacer
               .spacerSize="${SpacerSize.BIG}"
               spacerAlignment="${SpacerAlignment.BOTH}"
            >
               <nidoca-typography
                  .typographyType="${TypographyType.BUTTON}"
                  text="${I18nService.getUniqueInstance().getValue(
                     'no_entry_found'
                  )}"
               ></nidoca-typography>
            </nidoca-spacer>
         </nidoca-flex-container>
      `;
   }

   async deleteItems(${model.getModelNameLowerCase()}s: ${model.getModelName()}[]): Promise<void> {
        ${model.getModelNameLowerCase()}s.forEach((${model.getModelNameLowerCase()}) => {
             console.log('delete ${model.getModelNameLowerCase()} with id: {}', ${model.getModelNameLowerCase()}.id);
        ${model.getModelName()}RemoteRepository.getUniqueInstance().delete(${model.getModelNameLowerCase()}.id);
        });
   }

}
