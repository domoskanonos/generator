package ${packageName}.service;

import  ${packageName}.exception.StorageException;

import lombok.RequiredArgsConstructor;
import org.apache.commons.lang3.StringUtils;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;

/**
 * This service class provides basic functionality for fileupload to a server path
 */
@Service
@RequiredArgsConstructor
public class StorageService {

    private Logger log = LogManager.getLogger(this.getClass().getSimpleName());

    @Value("${upload.path}")
    private String path;

    /**
     * upload a file to storage folder.
     *
     * @param mf
     * @return count of saved entites.
     * @throws IOException
     */
    public void upload(MultipartFile mf, String pathSuffix) {

        log.info("upload file to storage folder: {}", mf.getOriginalFilename());

        if (StringUtils.isNotBlank(pathSuffix)) {
            log.info("additional pathSuffix avaliable, pathSuffix: {}", pathSuffix);
        }

        if (mf == null || mf.isEmpty()) {
            throw new StorageException("failed to store empty file.");
        }

        File fileUploadPath = new File(path);
        if (!fileUploadPath.exists()) {
            throw new StorageException("upload path not existing.");
        }

        String fileName = mf.getOriginalFilename();
        String completePath = path + pathSuffix + fileName;
        try (InputStream is = mf.getInputStream()) {
            Files.copy(is, Paths.get(completePath),
                    StandardCopyOption.REPLACE_EXISTING);
        } catch (IOException e) {
            throw new StorageException(String.format("failed to store file, filename= %s, complete storagePath= %s", mf.getName(), completePath), e);
        }

    }

}
