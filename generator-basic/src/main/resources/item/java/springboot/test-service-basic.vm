package ${packageName};

import ${model.javaDTOClazzName};
import ${model.javaServiceBasicClazzName};

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.MethodSorters;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit4.SpringRunner;

import java.util.*;

import static org.assertj.core.api.Assertions.assertThat;

@RunWith(SpringRunner.class)
@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class ${javaClazzSimpleName} {

    @Autowired
    private ${model.javaServiceBasicClazzSimpleName} service;

    @Autowired
    private ${entityClazzSimpleName}${model.javaDTOClazzSimpleName}Mapping mapping;

    @Test
    public void baseCheckEntity() throws InvocationTargetException, NoSuchMethodException, InstantiationException, IllegalAccessException {
        ${entityClazzSimpleName} entity = GeneratorUtil.createTestObject(${entityClazzSimpleName}.class, true);
        ${entityClazzSimpleName} entityClone = entity.toBuilder().build();
        assertThat(entity).isSameAs(entity);
        assertThat(entity).isEqualTo(entityClone);
        assertThat(entity.hashCode()).isEqualTo(entity.hashCode());
        assertThat(entity.toString()).isEqualTo(entityClone.toString());

        ${entityClazzSimpleName} notEqualEntity = GeneratorUtil.createTestObject(${entityClazzSimpleName}.class, false);

        assertThat(entity).isNotEqualTo(notEqualEntity);
        assertThat(entity.hashCode()).isNotEqualTo(notEqualEntity.hashCode());

    }

    @Test
    public void baseCheckDTO() throws InvocationTargetException, NoSuchMethodException, InstantiationException, IllegalAccessException {
        ${model.javaDTOClazzSimpleName} dto = GeneratorUtil.createTestObject(${model.javaDTOClazzSimpleName}.class, true);
        ${model.javaDTOClazzSimpleName} dtoClone = dto.toBuilder().build();
        assertThat(dto).isSameAs(dto);
        assertThat(dto).isEqualTo(dtoClone);
        assertThat(dto.hashCode()).isEqualTo(dto.hashCode());
        assertThat(dto.toString()).isEqualTo(dtoClone.toString());

        ${model.javaDTOClazzSimpleName} notEqualDTO = GeneratorUtil.createTestObject(${model.javaDTOClazzSimpleName}.class, false);

        assertThat(dto).isNotEqualTo(notEqualDTO);
        assertThat(dto.hashCode()).isNotEqualTo(notEqualDTO.hashCode());

    }


    @Test
    public void checkMapping() throws InvocationTargetException, NoSuchMethodException, InstantiationException, IllegalAccessException {
        List<${entityClazzSimpleName}> entities = GeneratorUtil.createTestObjects(${entityClazzSimpleName}.class, true, 10);
        List<${model.javaDTOClazzSimpleName}> dtos = mapping.toDTOs(entities);
        assertThat(dtos).isNotEmpty();
        assertThat(dtos.size()).isEqualTo(entities.size());
        List<${entityClazzSimpleName}> entitiesFromDTOs = mapping.toEntities(dtos);
        assertThat(entitiesFromDTOs).isNotEmpty();
        assertThat(entitiesFromDTOs.size()).isEqualTo(dtos.size());
    }

    /**
     * save a <code>{@link ${model.javaDTOClazzSimpleName}}</code> object as entity to database and check if all values are saved and mapped correctly.
     */
    @Test
    public void test1save() {

        #foreach( $property in $properties )
        #if( !${generatorUtil.isIdField($property.field)})
        ${property.propertyType.javaTypeSimpleName} ${property.name} = ${generatorUtil.getSampleData($property.field)};
        #end
        #end

        ${model.javaDTOClazzSimpleName} dto = new ${model.javaDTOClazzSimpleName}();
        #foreach( $property in $properties )
        #if( !${generatorUtil.isIdField($property.field)})
        dto.${stringUtil.toSetterMethodPrefix($property.name)}(${property.name});
        #end
        #end

        ${model.javaDTOClazzSimpleName} savedDTO = service.save(dto);

        assertThat(savedDTO).isNotNull();
        assertThat(savedDTO.getId()).isNotNull();
        #foreach( $property in $properties )
        #if( !${generatorUtil.isIdField($property.field)})
        assertThat(savedDTO.${stringUtil.toGetterMethodName($property.name)}).isEqualTo(${property.name});
        #end
        #end

    }

}
