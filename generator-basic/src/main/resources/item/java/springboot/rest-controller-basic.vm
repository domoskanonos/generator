package ${model.javaRestControllerPackageName};

import ${model.javaDTOClazzName};
import ${model.javaServiceBasicClazzName};

import lombok.RequiredArgsConstructor;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.data.domain.*;
import io.swagger.annotations.*;

import javax.validation.*;
import java.util.*;
import java.math.*;
import java.lang.*;


@Api(tags = "${model.javaRestControllerPrefix}")
@RestController
@RequiredArgsConstructor
@RequestMapping(${model.javaRestControllerBasicClazzSimpleName}.PATH_PREFIX)
public class ${model.javaRestControllerBasicClazzSimpleName} {

    public static final String PATH_PREFIX = "/${model.javaRestControllerPrefix}/BASIC";

    private final ${model.javaServiceBasicClazzSimpleName} service;

    private Logger log = LoggerFactory.getLogger(this.getClass().getSimpleName());

    @CrossOrigin
    @ApiOperation(value = "get a list of all ${model.javaDTOClazzSimpleName}", response = ${model.javaDTOClazzSimpleName}.class, responseContainer = "List")
    @GetMapping("ALL")
    public ResponseEntity<List<${model.javaDTOClazzSimpleName}>> findAll() {
        return ResponseEntity.ok(service.findAll());
    }

    @CrossOrigin
    @ApiOperation(value = "create a new object of ${model.javaDTOClazzSimpleName} and save it to database. return the saved object.", response = ${model.javaDTOClazzSimpleName}.class, responseContainer = "${model.javaDTOClazzSimpleName}")
    @PostMapping("CREATE")
    public ResponseEntity<${model.javaDTOClazzSimpleName}> create(@Valid @RequestBody ${model.javaDTOClazzSimpleName} dto) {
        return ResponseEntity.ok(service.save(dto));
    }

    #if(${model.idPropertyType.baseJavaType})

    @CrossOrigin
    @ApiOperation(value = "search object by id, method return BadRequest if object not exist, otherwise return the object of type ${model.javaDTOClazzSimpleName}.", response = ${model.javaDTOClazzSimpleName}.class, responseContainer = "${model.javaDTOClazzSimpleName}")
    @GetMapping("FIND_BY_ID/{id}")
    public ResponseEntity<${model.javaDTOClazzSimpleName}> findById(@PathVariable ${model.idPropertyType.javaTypeSimpleName} id) {
        Optional<${model.javaDTOClazzSimpleName}> dtoOptional = service.findById(id);
        if (dtoOptional.isPresent()) {
            return ResponseEntity.ok(dtoOptional.get());
        } else {
            log.error("object not found, id= {}", id);
            return ResponseEntity.badRequest().build();
        }
    }

    @CrossOrigin
    @ApiOperation(value = "update an existing object with new values, object is from type ${model.javaDTOClazzSimpleName}. if object not found, BadRequest will be returned.", response = ${model.javaDTOClazzSimpleName}.class, responseContainer = "${model.javaDTOClazzSimpleName}")
    @PutMapping("UPDATE/{id}")
    public ResponseEntity<${model.javaDTOClazzSimpleName}> update(@PathVariable ${model.idPropertyType.javaTypeSimpleName} id, @Valid @RequestBody ${model.javaDTOClazzSimpleName} dto) {
        if (!service.findById(id).isPresent()) {
            log.error("object not updated, id not found, id= {}, please check id", id);
            return ResponseEntity.badRequest().build();
        }

        dto.${model.idFieldSetterMethodName}(id);
        return ResponseEntity.ok(service.save(dto));
    }

    @CrossOrigin
    @ApiOperation(value = "delete a object of type ${model.javaDTOClazzSimpleName} by identifier (id). if object not found, BadRequest will be returned.", response = ${model.javaDTOClazzSimpleName}.class, responseContainer = "${model.javaDTOClazzSimpleName}")
    @DeleteMapping("DELETE/{id}")
    public ResponseEntity delete(@PathVariable ${model.idPropertyType.javaTypeSimpleName} id) {
        if (!service.findById(id).isPresent()) {
            log.error("object not deleted, id not found, id= {}, please check id", id);
            ResponseEntity.badRequest().build();
        }

        service.deleteById(id);

        return ResponseEntity.ok().build();
    }


    #end


}
