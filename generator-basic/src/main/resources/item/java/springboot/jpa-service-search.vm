package ${model.javaServiceBasicPackageName};

import lombok.RequiredArgsConstructor;
import org.springframework.data.domain.Page;
import org.springframework.stereotype.Service;

import org.apache.commons.lang3.StringUtils;

import ${model.javaPackageName}.system.jpa.entities.builder.PageBuilder;

import ${model.javaDTOClazzName};
import ${model.javaJPAClazzName};
import ${model.javaJPARepositoryClazzName};
import ${model.javaMappingClazzName};

import javax.persistence.*;
import javax.persistence.criteria.*;

import org.springframework.transaction.annotation.Transactional;

import java.util.*;
import java.math.*;
import java.lang.*;


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 *
 * This service class provides basic functionality for the hibernate entity <code>${model.javaJPAClazzSimpleName}</code>.
 * The return value of each function always returns a mapped <code>${model.javaDTOClazzSimpleName}</code> object,
 * instead of the original hibernate entity.
 *
 */
@Service
@RequiredArgsConstructor
public class ${model.javaServiceSearchClazzSimpleName} {

    private Logger log = LoggerFactory.getLogger(this.getClass().getSimpleName());

    private final EntityManager em;

    private final ${model.javaMappingClazzSimpleName} mapping;

    /**
     * Returns a pagination object with a list of <code>${model.javaDTOClazzSimpleName}</code> objects restricted to the search criteria.
     * This list corresponds to the list of <code>${model.javaJPAClazzSimpleName}</code> entities from the database.
     * Result will be sorted according to the given sorting string.
     * Result is restricted according to the paging criteria passed (page, size).
     *
     * @param page current page of pagination
     * @param size current item size of pagination
     * @param sort current sorting string for sorting
     * #foreach( $property in $properties )#if($property.isSearchable())@param ${property.name} search criteria #end#end
     *
     * @return a <code>Page<${model.javaDTOClazzSimpleName}></code> object, containing a list of <code>${model.javaDTOClazzSimpleName}</code> objects and additional paging information.
     *
     */
    @Transactional
    public Page<${model.javaDTOClazzSimpleName}> findByAllCriteriaQuery(Integer page, Integer size, String sort#foreach( $property in $model.properties )#if(${property.propertyType.searchable}), ${property.propertyType.javaTypeSimpleName} ${property.name}#end#end) {
        log.debug("findByAllCriteriaQuery, page: {}, size: {}, sort: {}, values: #foreach( $property in $model.properties )#if(${property.propertyType.searchable}){} #end#end", page, size, sort #foreach( $property in $properties )#if($property.isSearchable()), ${property.name}#end#end);
        return new PageBuilder<${model.javaJPAClazzSimpleName}, ${model.javaDTOClazzSimpleName}>(page, size, sort) {

            @Override
            protected List<${model.javaDTOClazzSimpleName}> toDTOs(List<${model.javaJPAClazzSimpleName}> resultList) {
                return mapping.toDTOs(resultList);
            }

            @Override
            protected void createPredicates(CriteriaBuilder cb, CriteriaQuery<${model.javaJPAClazzSimpleName}> cq, Root<${model.javaJPAClazzSimpleName}> entityRoot) {
                List<Predicate> predicates = new ArrayList<>();
                #foreach( $property in $model.properties )
                #if( !$property.idProperty)

                #if(${property.propertyType.javaTypeSimpleName} == 'String')
                if (StringUtils.isNotBlank(${property.name})) {
                    predicates.add(cb.like(cb.lower(entityRoot.get("${property.name}")), "%" + ${property.name}.toLowerCase() + "%"));
                }
                #elseif(${property.propertyType.javaTypeSimpleName} == 'Boolean')
                if (${property.name} != null) {
                    predicates.add(cb.equal(entityRoot.get("${property.name}"), ${property.name}));
                }
                #elseif(${property.propertyType.javaTypeSimpleName} == 'Integer' || ${property.type} == 'Long')
                if (${property.name} != null) {
                    //TODO:check
                    predicates.add(cb.equal(entityRoot.get("${property.name}"), ${property.name}));//equal
                    //predicates.add(cb.ge(entityRoot.get("${property.name}"), ${property.name}));//greater than
                    //predicates.add(cb.le(entityRoot.get("${property.name}"), ${property.name}));//lower than
                }
                #end
                #end
                #end
                if (predicates.size() > 0) {
                    cq.where(cb.or(predicates.toArray(new Predicate[predicates.size()])));
                }
            }
        }.build(${model.javaJPAClazzSimpleName}.class, em);
    }
}
