#set( $escapeDollar = '$' )
import {customElement, html, property, TemplateResult} from 'lit-element';
import { I18nService } from "@domoskanonos/frontend-basis";
import {NidocaInputfield, InputfieldType} from "@domoskanonos/nidoca-core";
import {NidocaAbstractComponentEdit} from '@domoskanonos/nidoca-app';
import * as model from '${model.typescriptModelPath}';
import {${model.typescriptRemoteRepositoryName}} from "${model.typescriptRemoteRepositoryPath}";

@customElement('${model.getNidocaComponentEditTagName()}')
export class model.${model.typescriptModelName}EditComponent extends NidocaAbstractComponentEdit<model.${model.typescriptModelName}> {

    async getItemById(identifier: any): Promise<model.${model.typescriptModelName}> {
        return ${model.typescriptRemoteRepositoryName}.getUniqueInstance().findById(identifier);
    }

    async executeSave(item: model.${model.typescriptModelName}): Promise<model.${model.typescriptModelName}> {
        return ${model.typescriptRemoteRepositoryName}.getUniqueInstance().persist(item);
    }

    async executeUpdate(identifier:any, item: model.${model.typescriptModelName}): Promise<model.${model.typescriptModelName}> {
        return ${model.typescriptRemoteRepositoryName}.getUniqueInstance().update(identifier, item);
    }

    async executeDelete(identifier: any): Promise<void> {
        return ${model.typescriptRemoteRepositoryName}.getUniqueInstance().delete(identifier);
    }

    #foreach( $property in $model.properties )
    #if(!${property.idProperty})
    @property()
    ${property.name} : ${property.typescriptType} ${property.propertyType.typescriptInitValue};
    #end
    #end

    renderFormFields(): TemplateResult {
        return html`
            #foreach( $property in $model.properties )
            #if(!${property.idProperty})
            <nidoca-inputfield
                    ${property.propertyType.typescriptNidocaInputfieldValueFieldName}="$escapeDollar{this.${property.name}}"
                    name="${property.name}"
                    inputfieldType="${property.propertyType.typescriptNidocaInputfieldType}"
                    label="$escapeDollar{I18nService.getUniqueInstance().getValue('${property.i18nEditName}')}"
            ></nidoca-inputfield>
            #end
            #end
        `;
    }

    itemToProperties(model.${model.typescriptModelNameToLowerCase}: model.${model.typescriptModelName}): void {
        #foreach( $property in $model.properties )
        #if(!${property.idProperty})
        this.${property.name} = model.${model.typescriptModelNameToLowerCase}.${property.name};
        #end
        #end
    }

    getIdentifier(model.${model.typescriptModelNameToLowerCase}: model.${model.typescriptModelName}): any {
        return model.${model.typescriptModelNameToLowerCase}.${model.getIdFieldName()};
    }


}
